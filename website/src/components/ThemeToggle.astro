---
// Theme toggle button component
---

<button
    class="theme-toggle"
    aria-label="Toggle dark mode"
    title="Toggle dark mode"
>
    <svg class="sun-icon" width="20" height="20" viewBox="0 0 20 20" fill="none">
        <circle cx="10" cy="10" r="4" fill="currentColor" />
        <path
            d="M10 1v2m0 14v2M4.22 4.22l1.42 1.42m8.72 8.72l1.42 1.42M1 10h2m14 0h2M4.22 15.78l1.42-1.42m8.72-8.72l1.42-1.42"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
        />
    </svg>
    <svg class="moon-icon" width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M17 10.5A7 7 0 1 1 9.5 3a5.5 5.5 0 0 0 7.5 7.5z" />
    </svg>
</button>

<style>
    .theme-toggle {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: var(--theme-toggle-gap, var(--space-sm));
        padding: var(--theme-toggle-padding, var(--space-sm) var(--space-lg));
        background: var(--theme-toggle-bg, var(--bg-secondary));
        border: var(--theme-toggle-border, 1px solid transparent);
        border-radius: var(--theme-toggle-border-radius, var(--border-radius-lg));
        color: var(--theme-toggle-color, var(--text-primary));
        font-size: var(--theme-toggle-font-size, var(--font-size-sm));
        font-weight: var(--theme-toggle-font-weight, var(--font-weight-medium));
        cursor: pointer;
        transition: all var(--transition-fast);
        white-space: nowrap;
        position: relative;
        width: var(--theme-toggle-width, 2.5rem);
        height: var(--theme-toggle-height, 2.5rem);
        view-transition-name: theme-toggle;
    }

    .theme-toggle:hover {
        background: var(--theme-toggle-hover-bg, var(--bg-hover));
        border-color: var(--theme-toggle-hover-border-color, var(--accent));
    }

    .theme-toggle:active {
        transform: var(--theme-toggle-active-transform, scale(0.98));
    }

    .sun-icon,
    .moon-icon {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        transition: none; /* Disable by default to prevent navigation flicker */
        color: var(--theme-toggle-icon-color, currentColor);
        width: var(--theme-toggle-icon-size, 20px);
        height: var(--theme-toggle-icon-size, 20px);
    }

    /* Enable transitions only when button is being clicked */
    .theme-toggle.transitioning .sun-icon,
    .theme-toggle.transitioning .moon-icon {
        transition: all var(--transition-normal);
    }

    /* Default: show sun icon (for light mode) */
    .sun-icon {
        opacity: 0;
        transform: translate(-50%, -50%) rotate(90deg) scale(0.8);
    }

    .moon-icon {
        opacity: 1;
        transform: translate(-50%, -50%) rotate(0deg) scale(1);
    }

    /* Dark mode: show moon icon */
    :global(.dark-mode) .sun-icon {
        opacity: 1;
        transform: translate(-50%, -50%) rotate(0deg) scale(1);
    }

    :global(.dark-mode) .moon-icon {
        opacity: 0;
        transform: translate(-50%, -50%) rotate(-90deg) scale(0.8);
    }

    @media (max-width: 768px) {
        .theme-toggle {
            width: var(--theme-toggle-width-mobile, 2.25rem);
            height: var(--theme-toggle-height-mobile, 2.25rem);
        }
    }
</style>

<script>
    function restoreTheme() {
        const getTheme = () => {
            // Check localStorage first
            const stored = localStorage.getItem("theme");
            if (stored === "dark" || stored === "light") {
                return stored;
            }
            // Fall back to system preference
            return window.matchMedia("(prefers-color-scheme: dark)").matches
                ? "dark"
                : "light";
        };

        const theme = getTheme();
        const html = document.documentElement;

        // Remove existing theme classes
        html.classList.remove("dark-mode", "light-mode");

        // Add the correct theme class
        html.classList.add(theme === "dark" ? "dark-mode" : "light-mode");
        html.setAttribute("data-theme", theme);
    }

    function setupThemeToggle() {
        const button = document.querySelector(".theme-toggle");
        if (!button) return;

        button.addEventListener("click", async () => {
            const html = document.documentElement;
            const currentTheme = html.classList.contains("dark-mode")
                ? "dark"
                : "light";
            const newTheme = currentTheme === "dark" ? "light" : "dark";

            // Enable icon transitions for smooth animation on user click
            button.classList.add("transitioning");

            // Disable all CSS transitions temporarily during theme change
            html.classList.add("theme-transitioning");

            // Check if browser supports View Transitions API
            if (document.startViewTransition) {
                const transition = document.startViewTransition(() => {
                    updateTheme(newTheme);
                });

                await transition.ready;
                await transition.finished;
            } else {
                // Fallback for browsers without View Transitions
                updateTheme(newTheme);
            }

            // Remove classes after animation completes
            setTimeout(() => {
                button.classList.remove("transitioning");
                html.classList.remove("theme-transitioning");
            }, 300); // Match transition duration
        });

        function updateTheme(theme) {
            const html = document.documentElement;

            // Update DOM - remove both classes first, then add the correct one
            html.classList.remove("dark-mode", "light-mode");
            html.classList.add(theme === "dark" ? "dark-mode" : "light-mode");

            // Update data-theme attribute for Expressive Code
            html.setAttribute("data-theme", theme);

            // Save to localStorage
            localStorage.setItem("theme", theme);
        }
    }

    // Restore theme BEFORE swap to prevent flash
    document.addEventListener("astro:before-swap", () => {
        restoreTheme();
    });

    // Restore theme on page load and after Astro view transitions
    document.addEventListener("DOMContentLoaded", () => {
        restoreTheme();
        setupThemeToggle();
    });

    document.addEventListener("astro:after-swap", () => {
        restoreTheme();
        setupThemeToggle();
    });

    // Also restore on astro:page-load to ensure theme persists
    document.addEventListener("astro:page-load", () => {
        restoreTheme();
        setupThemeToggle();
    });
</script>
