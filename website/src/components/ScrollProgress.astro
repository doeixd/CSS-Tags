---
/**
 * SCROLL PROGRESS INDICATOR
 *
 * Visual indicator showing reading progress through the page.
 * Displays as a colored bar at the top of the viewport.
 */
---

<div
	class="scroll-progress"
	role="progressbar"
	aria-label="Reading progress"
	aria-valuenow="0"
	aria-valuemin="0"
	aria-valuemax="100"
></div>

<style>
	.scroll-progress {
		position: fixed;
		top: 0;
		left: 0;
		width: 0%;
		height: 3px;
		background: linear-gradient(to right, var(--accent, #0066cc), var(--accent-light, #58a6ff));
		z-index: 9999;
		transition: width 0.1s ease-out;
	}
</style>

<script>
	let scrollHandler: (() => void) | null = null;

	function updateScrollProgress() {
		const scrollProgress = document.querySelector('.scroll-progress') as HTMLElement;
		if (!scrollProgress) return;

		const scrollTop = window.scrollY;
		const docHeight = document.documentElement.scrollHeight - window.innerHeight;
		const scrollPercent = docHeight > 0 ? (scrollTop / docHeight) * 100 : 0;
		const clampedPercent = Math.min(Math.max(scrollPercent, 0), 100);

		scrollProgress.style.width = `${clampedPercent}%`;
		scrollProgress.setAttribute('aria-valuenow', clampedPercent.toFixed(0));
	}

	function setupScrollProgress() {
		// Clean up previous listener to prevent memory leaks
		if (scrollHandler) {
			window.removeEventListener('scroll', scrollHandler);
		}

		scrollHandler = updateScrollProgress;
		window.addEventListener('scroll', scrollHandler, { passive: true });
		updateScrollProgress(); // Initial update
	}

	// Cleanup on page navigation
	document.addEventListener('astro:before-swap', () => {
		if (scrollHandler) {
			window.removeEventListener('scroll', scrollHandler);
			scrollHandler = null;
		}
	});

	// Setup on page load
	document.addEventListener('DOMContentLoaded', setupScrollProgress);

	// Re-setup after view transitions
	document.addEventListener('astro:after-swap', setupScrollProgress);
</script>
