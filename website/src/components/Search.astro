---
// Search component using Pagefind
const base = import.meta.env.BASE_URL;
const searchId = Astro.props.id || "search";
---

<div class="search-container" style="view-transition-name: search;">
    <div id={searchId}></div>
</div>

<script>
    // @ts-ignore
    import { PagefindUI } from "@pagefind/default-ui";

    function getQueryParam(name) {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(name);
    }

    function setQueryParam(name, value) {
        const url = new URL(window.location);
        if (value) {
            url.searchParams.set(name, value);
        } else {
            url.searchParams.delete(name);
        }
        window.history.replaceState({}, '', url);
    }

    async function initSearch() {
        // Initialize all search elements that exist
        const searchElements = document.querySelectorAll('[id$="-search"]');
        for (const searchElement of searchElements) {
            const elementId = searchElement.id;
            if (!elementId) continue;

            // Skip if already initialized
            if (searchElement.hasAttribute('data-pagefind-initialized')) continue;

            // Clear any existing content
            searchElement.innerHTML = '';

            searchElement.setAttribute('data-pagefind-initialized', 'true');

            try {
                // @ts-ignore
                const { PagefindUI } = await import("@pagefind/default-ui");

                // Get initial query from URL
                const initialQuery = getQueryParam('q') || '';

                // Initialize new search UI
                const pagefindUI = new PagefindUI({
                    element: "#" + elementId,
                    showSubResults: true,
                    showImages: false,
                    excerptLength: 15,
                    // @ts-ignore
                    baseUrl: import.meta.env.BASE_URL,
                    bundlePath:
                        import.meta.env.BASE_URL.replace(/\/$/, "") + "/pagefind/",
                    processResult: (result) => {
                        // Strip HTML tags from excerpt
                        if (result.excerpt) {
                            result.excerpt = result.excerpt.replace(/<[^>]*>/g, "");
                        }
                        return result;
                    },
                });

            // Set initial query if present
            if (initialQuery) {
                setTimeout(() => {
                    const input = searchElement.querySelector(".pagefind-ui__search-input");
                    if (input) {
                        input.value = initialQuery;
                        // Trigger search
                        input.dispatchEvent(new Event('input', { bubbles: true }));

                        // Scroll search into view after results load
                        setTimeout(() => {
                            searchElement.scrollIntoView({
                                behavior: 'smooth',
                                block: 'start'
                            });
                        }, 200);
                    }
                }, 100);
            }

            // Listen for input changes to update URL
            setTimeout(() => {
                const input = searchElement.querySelector(".pagefind-ui__search-input");
                if (input) {
                    input.addEventListener('input', (e) => {
                        const query = e.target.value.trim();
                        setQueryParam('q', query);
                    });
                }
            }, 100);

            // Wait for Pagefind to render, then move clear button outside form
            setTimeout(() => {
                const form = searchElement.querySelector(".pagefind-ui__form");
                const clearButton = searchElement.querySelector(
                    ".pagefind-ui__search-clear",
                );

                if (form && clearButton) {
                    // Move clear button to be a sibling of the form instead of inside it
                    form.parentNode?.insertBefore(
                        clearButton,
                        form.nextSibling,
                    );

                    // Keep it visually positioned inside the input
                    clearButton.style.position = "absolute";
                }
            }, 100);
            } catch (error) {
                console.error("Failed to initialize Pagefind search:", error);
                // Fallback: show a message or hide the search
                searchElement.innerHTML = "<p>Search is currently unavailable.</p>";
            }
        }
    }

    // Initialize on page load
    document.addEventListener("DOMContentLoaded", initSearch);

    // Re-initialize after view transitions
    document.addEventListener("astro:after-swap", initSearch);

    // Listen for browser navigation (back/forward buttons)
    window.addEventListener('popstate', () => {
        const searchElement = document.querySelector("#search");
        if (searchElement) {
            const input = searchElement.querySelector(".pagefind-ui__search-input");
            const newQuery = getQueryParam('q') || '';
            if (input && input.value !== newQuery) {
                input.value = newQuery;
                input.dispatchEvent(new Event('input', { bubbles: true }));
            }
        }
    });

    // Keyboard shortcut: Ctrl+K to focus search
    document.addEventListener('keydown', (e) => {
        if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
            e.preventDefault();
            const searchElement = document.querySelector("#search");
            if (searchElement) {
                const input = searchElement.querySelector(".pagefind-ui__search-input");
                if (input) {
                    // Scroll search into view
                    searchElement.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                    // Focus the input after a short delay to ensure scroll completes
                    setTimeout(() => {
                        input.focus();
                    }, 300);
                }
            }
        }
    });
</script>

<style is:global>
    .search-container {
        margin-bottom: 1.5rem;
        padding-bottom: 1.5rem;
        border-bottom: 1px solid
            var(--search-container-border-color, transparent);
    }

    /* Pagefind UI Styling */
    #search {
        width: 100%;
    }

    .search-container {
        position: relative;
    }

    .pagefind-ui__form {
        position: relative;
    }

    .pagefind-ui__search-input {
        width: 100%;
        padding: var(--space-md) 2.75rem var(--space-md) var(--space-lg);
        font-size: var(--font-size-base);
        border: 1px solid var(--border-color);
        border-radius: var(--search-border-radius);
        background: var(--bg-primary);
        color: var(--text-primary);
        transition: border-color var(--transition-fast);
    }

    .pagefind-ui__search-input:focus {
        outline: none;
        border-color: var(--accent);
        box-shadow: var(--search-focus-shadow) var(--accent-light);
    }

    .pagefind-ui__search-clear {
        position: absolute;
        right: calc(var(--search-container-padding, 0px) + var(--space-sm));
        top: var(--search-clear-button-top);
        width: var(--search-clear-size, 2rem);
        height: var(--search-clear-size, 2rem);
        padding: 0;
        background: var(--search-clear-bg, transparent);
        border: none;
        border-radius: var(
            --search-clear-border-radius,
            var(--border-radius-md)
        );
        color: var(--search-clear-color, var(--text-secondary));
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all var(--transition-fast);
        font-size: 0;
        line-height: 0;
        text-indent: var(--search-text-indent-hidden);
        overflow: hidden;
        z-index: 10;
    }

    /* Hide when input is empty (Pagefind adds .pagefind-ui__suppressed class) */
    .pagefind-ui__search-clear.pagefind-ui__suppressed {
        opacity: 0 !important;
        pointer-events: none !important;
        visibility: hidden !important;
    }

    /* Show when input has content */
    .search-container:has(.pagefind-ui__search-input:not(:placeholder-shown))
        .pagefind-ui__search-clear:not(.pagefind-ui__suppressed) {
        opacity: 1;
        pointer-events: auto;
        visibility: visible;
    }

    .pagefind-ui__search-clear:hover {
        background: var(--search-clear-hover-bg, var(--bg-hover));
        color: var(--search-clear-hover-color, var(--text-primary));
    }

    .pagefind-ui__search-clear:active {
        transform: scale(0.95);
    }

    /* X icon using pseudo-elements */
    .pagefind-ui__search-clear::before,
    .pagefind-ui__search-clear::after {
        content: "";
        position: absolute;
        width: var(--search-clear-icon-width, var(--search-clear-icon-size));
        height: var(--search-clear-icon-thickness);
        background: currentColor;
        border-radius: var(--search-clear-icon-border-radius, 1px);
    }

    .pagefind-ui__search-clear::before {
        transform: rotate(45deg);
    }

    .pagefind-ui__search-clear::after {
        transform: rotate(-45deg);
    }

    /* Hide any child elements (text nodes, etc) */
    .pagefind-ui__search-clear > *,
    .pagefind-ui__search-clear svg {
        display: none !important;
    }

    .pagefind-ui__results {
        margin-top: 1rem;
        margin-left: 0;
        padding-left: 0;
    }

    .pagefind-ui__result {
        padding: var(--space-lg);
        margin-bottom: var(--space-sm);
        border: 1px solid var(--border-color);
        border-radius: var(--search-border-radius);
        background: var(--bg-primary);
        transition: background-color var(--transition-fast);
        overflow: hidden;
        word-wrap: break-word;
        overflow-wrap: break-word;
    }

    .pagefind-ui__result:hover {
        background: var(--bg-hover);
    }

    .pagefind-ui__result-link {
        color: var(--text-primary, #1a1a1a);
        text-decoration: none;
        display: block;
        width: 100%;
        height: 100%;
        cursor: pointer;
    }

    /* Dark mode - Override default link color for search results */
    @media (prefers-color-scheme: dark) {
        :root:not(.light-mode) .pagefind-ui__result-link {
            color: var(--text-primary);
        }
    }

    :root.dark-mode .pagefind-ui__result-link {
        color: var(--text-primary);
    }

    .pagefind-ui__result {
        position: relative;
        cursor: pointer;
    }

    .pagefind-ui__result-title {
        font-size: var(--font-size-lg);
        font-weight: var(--font-weight-semibold);
        color: var(--text-primary);
        margin-bottom: var(--space-sm);
        line-height: var(--line-height-body);
    }

    .pagefind-ui__result-excerpt {
        font-size: var(--font-size-base);
        color: var(--text-secondary);
        line-height: var(--line-height-body);
        margin: 0;
    }

    .pagefind-ui__result-highlight {
        background-color: var(--accent-light) !important;
        color: var(--accent-dark) !important;
        padding: 0.1em 0.2em !important;
        border-radius: var(--border-radius-sm) !important;
        font-weight: var(--font-weight-medium) !important;
    }

    /* Style <mark> elements used by Pagefind for highlighting */
    .pagefind-ui mark {
        background-color: var(--accent-light) !important;
        color: var(--accent-dark) !important;
        padding: 0.1em 0.2em !important;
        border-radius: var(--border-radius-sm) !important;
        font-weight: var(--font-weight-medium) !important;
    }

    /* Load more results button */
    .pagefind-ui__button {
        background: var(--accent);
        color: white;
        border: none;
        padding: var(--space-md) var(--space-lg);
        border-radius: var(--border-radius-md);
        font-size: var(--font-size-base);
        font-weight: var(--font-weight-medium);
        cursor: pointer;
        transition: background-color var(--transition-fast);
        display: block;
        margin: var(--space-lg) auto 0;
    }

    .pagefind-ui__button:hover {
        background: var(--accent-dark);
    }

    .pagefind-ui__button:active {
        transform: scale(0.98);
    }

    /* Results count/stats text */
    .pagefind-ui__stats {
        font-size: var(--font-size-sm);
        color: var(--text-secondary) !important;
        text-align: center;
        margin: var(--space-md) 0;
        font-weight: var(--font-weight-normal);
    }

    /* Any other Pagefind UI text elements */
    .pagefind-ui p,
    .pagefind-ui span,
    .pagefind-ui div {
        color: var(--text-secondary) !important;
    }
