/**
 * box.css
 *
 * The "Swiss Army Knife" utility component.
 * ------------------------------------------------------------------------------
 * This component provides a declarative way to control dozens of CSS
 * properties via HTML attributes. It's perfect for one-off layouts,
 * spacers, and custom-styled containers without writing new CSS.
 *
 * @feature {attr() Level 5} - Extensively uses `attr()` with type-or-unit
 *   and fallback values for dynamic and robust styling.
 * @feature {Logical Properties} - Uses `padding-inline`, `margin-block`, etc.
 */

box {
  /*
   * For each CSS property, we define a custom property that reads its value
   * from an HTML attribute using attr(). A fallback value is always provided.
   */

  /* Display & Layout */
  --display: attr(display type(*), block);

  /* Spacing (using logical properties) */
  --padding:         attr(p type(<length-percentage>), 0);
  --padding-inline:  attr(px type(<length-percentage>), var(--padding));
  --padding-block:   attr(py type(<length-percentage>), var(--padding));
  --margin:          attr(m type(<length-percentage>), 0);
  --margin-inline:   attr(mx type(<length-percentage>), var(--margin));
  --margin-block:    attr(my type(<length-percentage>), var(--margin));

  /* Sizing */
  --width:  attr(width type(<length-percentage>), auto);
  --height: attr(height type(<length-percentage>), auto);
  --max-width: attr(max-width type(<length-percentage>), none);

  /* Appearance */
  --background: attr(bg type(<color>), transparent);
  --color:      attr(color type(<color>), inherit);
  --border:     attr(border type(*), none);
  --radius:     attr(radius type(<length-percentage>), 0);

  /* Typography */
  --text-align: attr(align type(*), start);

  /* Apply the variables to the actual CSS properties */
  display: var(--display);
  padding-inline: var(--padding-inline);
  padding-block: var(--padding-block);
  margin-inline: var(--margin-inline);
  margin-block: var(--margin-block);
  width: var(--width);
  height: var(--height);
  max-width: var(--max-width);
  background: var(--background);
  color: var(--color);
  border: var(--border);
  border-radius: var(--radius);
  text-align: var(--text-align);

  /*
   * Example of using a mixin for more complex styles.
   * A box with `elevation="2"` would receive a pre-defined shadow.
   */
  &[elevation] {
    /* @apply --elevation(attr(elevation type(<integer>))); */
  }
}